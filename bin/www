#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dotenv = require("dotenv");
const { readFileSync } = require("fs");
const { app, io } = require("../app.js");
const debug = require("debug")("projecttwo:server");
const https = require("https");

/**
 * Get port from environment and store in Express.
 */
dotenv.config();
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Load in SSL Keys and Certs
 */
const { LOCALHOST_SSL_KEY, LOCALHOST_SSL_CERT } = process.env;
const config = {
  key: readFileSync(LOCALHOST_SSL_KEY),
  cert: readFileSync(LOCALHOST_SSL_CERT),
};

/**
 * Create HTTPS server.
 */

const server = https.createServer(config, app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Attach socketIO server
io.attach(server);
server.listen(port, () => {
  console.log(`Listening on https://localhost:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
